#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: debian/cxlflash.postinst $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

set -e

# source debconf library
. /usr/share/debconf/confmodule

case "$1" in

  configure)

USERNAME=cxl
GROUPNAME=$USERNAME
BIN_DIR=/usr/bin
ETC_DIR=/etc/cxlflash
SIO_FILE=$ETC_DIR/sioluntable.ini
LD=.EaienF48ajfFgBMIhsalfc
HD=.Jfa82FBMIhsalfc
TDIR=tmp
CKV_DIR=/opt/ibm/capikv
if [[ -e /usr/lib64 ]]; then LIB_DIR=/usr/lib64; EXT_DIR=${LIB_DIR}/cxlflash/ext;
else                         LIB_DIR=/usr/lib;   EXT_DIR=${LIB_DIR}/cxlflash/ext; fi

#Creating empty SIO lun table and etc dir
if [[ -z $(grep cxl /etc/passwd) ]]
then
  echo "INFO: Creating system cxl user / group..."
  useradd --system --user-group $USERNAME
fi

echo "INFO: setting permissions on cxl and cxlflash device nodes."
udevadm trigger -s cxl
udevadm trigger -s cxlflash

echo "INFO: Ensuring SIO LUN Table exists..."
if [[ ! -e $ETC_DIR ]]; then mkdir $ETC_DIR; fi
chown $USERNAME:$GROUPNAME $ETC_DIR
chmod 770 $ETC_DIR
if [[ ! -e $SIO_FILE ]]; then touch $SIO_FILE; fi
chown $USERNAME:$GROUPNAME $SIO_FILE
chmod 660 $SIO_FILE

if [[ -e $BIN_DIR/cflash_logs_cron ]]; then cp $BIN_DIR/cflash_logs_cron /etc/cron.hourly; fi

if [[ -e /$TDIR/cxlflash_headless ]]
then
  echo "INFO: running headless"
  if [[ ! -e /opt/.lic/$LD ]]; then date > /opt/.lic/$LD; fi
else
  if [[ ! -e /opt/.lic/$LD ]]
  then
    if [[ $CFLASH_CONFIGURE -ne 1 ]]
    then
      echo "************************************************************************"
      echo "*** run /usr/bin/cflash_configure to complete the install ***"
      echo "************************************************************************"
    fi
    ls ${LIB_DIR}/libcflsh_block* >/dev/null 2>&1; if [[ $? -eq 0 ]]; then liclib=yes; else liclib=no; fi
    if [[ $liclib = yes ]]
    then
      if [[ ! -e /opt/$HD ]]; then mkdir /opt/$HD; fi
      mv ${LIB_DIR}/libcflsh_block*.so /opt/$HD >/dev/null 2>&1
    fi
  fi
fi

tar -xzf ${EXT_DIR}/ext.tgz -C ${EXT_DIR}
chmod +x ${EXT_DIR}/*

#setup links for migration
mkdir -p ${CKV_DIR}/bin
mkdir -p ${CKV_DIR}/afu
mkdir -p ${CKV_DIR}/etc
if [[ -e ${CKV_DIR}/version.txt ]];          then rm -f ${CKV_DIR}/version.txt; fi
if [[ -e ${CKV_DIR}/readme.txt ]];           then rm -f ${CKV_DIR}/readme.txt; fi
if [[ -e ${CKV_DIR}/etc/cflash_configure ]]; then rm -f ${CKV_DIR}/etc/cflash_configure; fi
if [[ -e ${CKV_DIR}/bin/setup.sh ]];         then rm -f ${CKV_DIR}/bin/setup.sh; fi
ln -s /usr/share/cxlflash/readme.txt  ${CKV_DIR}/readme.txt
ln -s /usr/share/cxlflash/version.txt ${CKV_DIR}/version.txt
ln -s /usr/bin/cflash_configure       ${CKV_DIR}/etc/cflash_configure
ln -s /usr/bin/cflash_setup           ${CKV_DIR}/bin/setup.sh

AFUFILES="\
${CKV_DIR}/afu/cflash_perf.pl \
${CKV_DIR}/afu/cflash_temp.pl \
${CKV_DIR}/afu/cflash_capacity.pl \
${CKV_DIR}/afu/capi_flash.pl \
${CKV_DIR}/afu/cflash_stick.pl \
${CKV_DIR}/afu/cflash_perst.pl \
${CKV_DIR}/afu/cxlffdc \
${CKV_DIR}/afu/cflash_wear.pl \
${CKV_DIR}/afu/cflash_devices.pl"
for f in ${AFUFILES}; do
  if [[ -e $f ]]; then rm -f $f; fi
  exist=$(ls /usr/bin/$(basename ${f%.*}))
  ln -s ${exist} $f
done
BINFILES="\
${CKV_DIR}/bin/provtool \
${CKV_DIR}/bin/afucfg.sh \
${CKV_DIR}/bin/cxlflashutil \
${CKV_DIR}/bin/cflash_version \
${CKV_DIR}/bin/cxlfsetlunmode \
${CKV_DIR}/bin/cxlfrefreshluns \
${CKV_DIR}/bin/cxlfstatus"
for f in ${BINFILES}; do
  if [[ -e $f ]]; then rm -f $f; fi
  exist=$(ls /usr/bin/$(basename ${f%.*}))
  ln -s ${exist} $f
done

  echo "INFO: enabling cxlfd service for LUN Management"
  # was-enabled defaults to true, so new installations run enable.
  if deb-systemd-helper --quiet was-enabled cxlfd.service; then
    # Enables the unit on first installation, creates new
    # symlinks on upgrades if the unit file has changed.
    deb-systemd-helper enable cxlfd.service >/dev/null || echo "WARNING: Unable to enable the cxlfd service via systemctl. Please enable the cxlfd daemon for LUN management."
  else
    # Update the statefile to add new symlinks (if any), which need to be
    # cleaned up on purge. Also remove old symlinks.
    deb-systemd-helper update-state cxlfd.service >/dev/null || true
  fi

  if [ -d /run/systemd/system ]; then
    systemctl --system daemon-reload >/dev/null || true
    deb-systemd-invoke start cxlfd.service >/dev/null || echo "WARNING: Unable to start the cxlfd service via systemctl. Please enable the cxlfd daemon for LUN management."
  fi

  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    exit 0
  ;;

  *)
    echo "postinst called with unknown argument \`$1'" >&2
    exit 1
  ;;

esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

db_stop

exit 0