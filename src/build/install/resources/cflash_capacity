#! /usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/install/resources/cflash_capacity $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
##
use strict;
use warnings;
use Fcntl;
use Fcntl ':seek';
use Getopt::Long qw(:config no_ignore_case);

#-------------------------------------------------------------------------------
# Variables
my $type="0601|0628";
my $devices="";
my $size;
my $superpipe;
my $tsize=0;
my $prthelp=0;
my $verbose;

sub usage()
{
  print "\n";
  print "Usage: cflash_capacity [-t type] [-S] [-v]                  \n";
  print "    -t or --type      : Type to list                        \n";
  print "    -S or --superpipe : use only devs in superpipe mode     \n";
  print "    -v                : verbose output                      \n";
  print "    -h or --help      : Help - Print this message           \n";
  print "\n  ex: cflash_devices -t 0601                           \n\n";
  exit 0;
}

#-------------------------------------------------------------------------------
# Parse Options
#-------------------------------------------------------------------------------
if (! GetOptions ("t|type=s"    => \$type,
                  "S|superpipe" => \$superpipe,
                  "v"           => \$verbose,
                  "h|help!"     => \$prthelp
                  ))
{
  usage();
}
if ($ARGV[0])
{
  print "\nUnknown Command Line Options:\n";
  foreach(@ARGV)
  {
    print "   $_\n";
  }
  print "\n";
  usage();
}
if ($prthelp) {usage();}

#-------------------------------------------------------------------------------
# Make stdout autoflush
#-------------------------------------------------------------------------------
select(STDOUT);
$| = 1;

#check permissions
(! (`groups $ENV{'USER'}` =~ / cxl/ || `id -u $ENV{'USER'}` == 0)) && die "You do not have enough permissions\n";

#-------------------------------------------------------------------------------
# list Devices
#-------------------------------------------------------------------------------
my @cards = `lspci |egrep "$type"`;
my $cmd="";
my $sym;
my $cap;

for my $cardN (@cards)
{
  my @Acard=split / /, $cardN;
  my $card=$Acard[0];
  chomp $card;
  my $afustr=`ls -d /sys/devices/*/*/$card/cxl/card*/afu*.0/afu*m 2>/dev/null`;
  my @afu=split /\//, $afustr;
  my $afu=pop @afu;
  if (length $afu) {chomp $afu;}
  else             {$afu="";}
  my $cardstr=`ls -d /sys/devices/*/*/$card/cxl/card* 2>/dev/null`;
  chomp $cardstr;
  my $cardN=substr $cardstr,-1;

  for (my $i=0; $i<4; $i++)
  {
    if ($i == 1 && $type =~ /04cf/) {next;}
    my @devs=`ls /sys/devices/*/*/$card/*/*/host*/target*:*:*/*:$i:*:*/scsi_generic 2>/dev/null|grep ^sg`;

    if ($? != 0) {next;}

    foreach my $dev (@devs)
    {
      chomp $dev;
      $size=`sg_readcap /dev/$dev 2>/dev/null|grep size|awk '{print \$3}'`;
      chomp $size;
      if ($size eq "") {$size=0;}
      $size/=(1024*1024*1024);

      my $line =`/usr/bin/cxlfstatus|grep $dev`;
      my @pdevs=split /:/, $line;
      my $pdev=$pdevs[0];
      chomp $pdev;
      $pdev =~ tr/ //ds;
      if ($pdev eq "") {next;}
      if ($superpipe && !($line =~ /superpipe/)) {next;}

      if ($verbose)
      {
        printf("/dev/%s: %d    ",$pdev, $size);
        if ($type =~ /0601/ || $type =~ /0628/)
        {
          my $cap="/usr/bin/flashgt_nvme_nsq";
          if (-e $cap)
          {
            my $out=`$cap --port $i /dev/cxl/$afu`;
            chomp $out;
            printf("    $out");
          }
        }
        printf("\n");
      }
      $tsize+=$size;
    }
  }
}

print "$tsize\n";

