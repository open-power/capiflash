#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/install/resources/cflash_configure $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

if [[ $1 =~ help || $1 =~ -h ]]; then echo "Usage: $(basename $0)"; exit 0; fi
if [[ $1 =~ version ]]; then echo "v1.0"; exit 0; fi

if [[ $(id -u) != 0 ]]; then echo "use sudo"; exit 1; fi

if [[ ! -e /opt ]]; then mkdir /opt; fi
if [[ ! -e /opt/.lic ]]; then mkdir /opt/.lic; fi

export PATH=$PATH:/usr/bin:.
export CFLASH_CONFIGURE=1

rc=0
LD=.EaienF48ajfFgBMIhsalfc
HD=.Jfa82FBMIhsalfc
force=no
LIC_DIR=/usr/share/doc/cxlflash/license
SHARE_DIR=/usr/share/cxlflash

wget www.ibm.com >/dev/null 2>&1
internet=$?

if [[ -e /usr/lib64 ]]; then LIB_DIR=/usr/lib64; else LIB_DIR=/usr/lib; fi
ls ${LIB_DIR}/libcflsh_block* >/dev/null 2>&1; if [[ $? -eq 0 ]]; then liclib=yes; else liclib=no; fi

##################################
# Determine distro
if [[ $(lsb_release -a 2>/dev/null) =~ Ubuntu ]];               then ubuntu=1; fi
if [[ $(cat /etc/redhat-release 2>/dev/null) =~ Red ]];         then redhat=1; fi
if [[ $(grep platform /proc/cpuinfo 2>/dev/null) =~ pSeries ]]; then VM=1; fi

################################################################################
################################################################################
################################################################################
#                                                                              #
#                                                                              #
#                               Ubuntu                                         #
#                                                                              #
#                                                                              #
################################################################################
################################################################################
################################################################################
if [[ $ubuntu ]]
then
  ls *cxlflash*.deb >/dev/null 2>&1
  rc=$?

  if [[ -e ver.txt && $rc -eq 0 ]]
  then
    CF_VER=$(cat ver.txt)
    echo "------------------------------"
    echo -e "INFO: Attempting to install version($CF_VER)\n"
  elif [[ -e $SHARE_DIR/version.txt ]]
  then
    CF_VER=$(cat $SHARE_DIR/version.txt|awk -F- '{print $1}')
    echo "------------------------------"
    echo -e "INFO: Attempting to configure version($CF_VER)\n"
  else
    echo "ERROR: no cxlflash pkgs are installed"
    exit 30
  fi

 cflash_depends
 if [[ $? -ne 0 ]]; then exit 44; fi

 ##################################
 # Check usr-mode software version
 echo "------------------------------"
 echo -e "INFO: Checking software versions\n"

 if [[ $1 =~ mfg && $liclib = no ]]; then force=yes; fi

 #remove old
 EXISTS_LVL=$(dpkg -l|egrep "i  ibmcapikv-test|i  cxlflash-test")
 if [[ $EXISTS_LVL =~ ibmcapikv-test ]]
 then
   dpkg -r ibmcapikv-test
 fi
 if [[ $EXISTS_LVL =~ cxlflash-test && ! $EXISTS_LVL =~ $CF_VER ]]
 then
   dpkg -r cxlflash-test
 fi

 EXISTS_LVL=$(dpkg -l|grep -v test|egrep "i  ibmcapikv |i  cxlflash ")
 if [[ $EXISTS_LVL =~ ibmcapikv ]]
 then
   dpkg -r ibmcapikv
 fi
 if [[ $EXISTS_LVL =~ cxlflash && ! $EXISTS_LVL =~ $CF_VER ]]
 then
   dpkg -r cxlflash
 fi

 EXISTS_LVL=$(dpkg -l|grep -v test|egrep "i  afuimage |i  cxlflashimage ")
 if [[ $EXISTS_LVL =~ afuimage ]]
 then
   dpkg -r afuimage
 fi
 if [[ $EXISTS_LVL =~ cxlflashimage && ! $EXISTS_LVL =~ $CF_VER ]]
 then
   dpkg -r cxlflashimage
 fi

 #install new
 EXISTS_LVL=$(dpkg -l|grep -v test|egrep "i  cxlflash ")
 if [[ ! $EXISTS_LVL =~ "i  cxlflash " || $force =~ yes || \
        ($EXISTS_LVL =~ "i  cxlflash " && ! $EXISTS_LVL =~ $CF_VER) ]]
 then
    ls cxlflash_*$CF_VER*.deb >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then dpkg -i cxlflash_*$CF_VER*.deb; fi
 fi

 EXISTS_LVL=$(dpkg -l|egrep "i  cxlflash-test")
 if [[ ! $EXISTS_LVL =~ "i  cxlflash-test" || \
        ($EXISTS_LVL =~ cxlflash-test && ! $EXISTS_LVL =~ $CF_VER) ]]
 then
   if ls cxlflash-test*$CF_VER*.deb > /dev/null 2>&1
   then
     dpkg -i cxlflash-test*$CF_VER*.deb
   fi
 fi

 EXISTS_LVL=$(dpkg -l|grep 'i  cxlflashimage')
 if [[ ! $EXISTS_LVL =~ cxlflashimage || \
        ($EXISTS_LVL =~ cxlflashimage && ! "$EXISTS_LVL" =~ $CF_VER) ]]
 then
   #pkg is not required, only install if it exists
   ls cxlflashimage*$CF_VER*.deb >/dev/null 2>&1
   if [[ $? -eq 0 ]]; then dpkg -i cxlflashimage*$CF_VER*.deb; fi
 fi

 ##################################
 # Check OS version
 echo "------------------------------"
 echo -e "INFO: Checking OS version\n"

 if [[ $(lsb_release -a 2>/dev/null|grep Description|awk '{print $3}'|awk -F. '{print $1}') -lt 16 ]]
 then
   echo "The linux OS must be updated to at least 16.04.1"
   echo -e "Update the OS and retry, aborting...\n"
   exit 11
 fi

 ##################################
 # Check cxlflash pkgs
 if [[ -z $(dpkg -l|grep "i  cxlflash") ]]
 then
   echo -e "\nERROR: cxlflash packages failed to install\n"
   exit 15
 fi
 if [[ ! -z $(dpkg -l|grep 'i  cxlflashimage') ]]; then imagepkg=1; fi
fi


################################################################################
################################################################################
################################################################################
#                                                                              #
#                                                                              #
#                                  RedHat                                      #
#                                                                              #
#                                                                              #
################################################################################
################################################################################
################################################################################
if [[ $redhat ]]
then
  ls *cxlflash*.rpm >/dev/null 2>&1
  rc=$?

  if [[ -e ver.txt && $rc -eq 0 ]]
  then
    CF_VER=$(cat ver.txt| sed 's,-,_,g')
    echo "------------------------------"
    echo -e "INFO: Attempting to install version($CF_VER)\n"
  elif [[ -e $SHARE_DIR/version.txt ]]
  then
    CF_VER=$(cat $SHARE_DIR/version.txt| sed 's,-,_,g')
    echo "------------------------------"
    echo -e "INFO: Attempting to configure version($CF_VER)\n"
  else
    echo "ERROR: no cxlflash pkgs are installed nor found in `pwd`"
    exit 31
  fi

 cflash_depends
 if [[ $? -ne 0 ]]; then exit 44; fi

  ##################################
  # Check usr-mode software version
  echo "------------------------------"
  echo -e "INFO: Checking software versions\n"

  if [[ $1 =~ mfg && $liclib = no ]]; then force=yes; fi

  ################
  #remove old
  EXISTS_LVL=$(rpm -qa|egrep "ibmcapikv-test|cxlflash-test")
  if [[ $EXISTS_LVL =~ ibmcapikv-test ]]
  then
    rpm -e ibmcapikv-test
  fi
  if [[ $EXISTS_LVL =~ cxlflash-test && ! $EXISTS_LVL =~ $CF_VER ]]
  then
    rpm -e -v cxlflash-test
  fi

  EXISTS_LVL=$(rpm -qa|grep -v test|egrep "ibmcapikv|cxlflash")
  if [[ $EXISTS_LVL =~ ibmcapikv ]]
  then
    rpm -e -v  ibmcapikv
  fi
  if [[ $EXISTS_LVL =~ cxlflash && ! $EXISTS_LVL =~ $CF_VER ]]
  then
    rpm -e -v cxlflash
  fi

  EXISTS_LVL=$(rpm -qa|grep -v test|egrep "afuimage|cxlflashimage")
  if [[ $EXISTS_LVL =~ afuimage ]]
  then
    rpm -e afuimage
  fi
  if [[ $EXISTS_LVL =~ cxlflashimage && ! $EXISTS_LVL =~ $CF_VER ]]
  then
    rpm -e cxlflashimage
  fi

  #################
  #install new pkgs
  EXISTS_LVL=$(rpm -qa|grep -v test|egrep "cxlflash")
  if [[ ! $EXISTS_LVL =~ "cxlflash" || $force = yes || \
         ($EXISTS_LVL =~ "cxlflash" && ! $EXISTS_LVL =~ $CF_VER) ]]
  then
    ls cxlflash-$CF_VER*.rpm >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then rpm -i -v cxlflash-$CF_VER*.rpm; fi
  fi

  EXISTS_LVL=$(rpm -qa|egrep "cxlflash-test")
  if [[ ! $EXISTS_LVL =~ "cxlflash-test" || \
         ($EXISTS_LVL =~ cxlflash-test && ! $EXISTS_LVL =~ $CF_VER) ]]
  then
    #pkg is not required, only install if it exists
    ls cxlflash-test*$CF_VER*.rpm >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then rpm -i -v cxlflash-test*$CF_VER*.rpm; fi
  fi

  EXISTS_LVL=$(rpm -qa|grep 'cxlflashimage')
  if [[ ! $EXISTS_LVL =~ cxlflashimage || \
         ($EXISTS_LVL =~ cxlflashimage && ! "$EXISTS_LVL" =~ $CF_VER) ]]
  then
    #pkg is not required, only install if it exists
    ls cxlflashimage*$CF_VER*.rpm >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then rpm -i -v cxlflashimage*$CF_VER*.rpm; fi
  fi

  ##################################
  # Check OS version
  ver=$(grep "VERSION_ID" /etc/os-release | awk -F'"' '{print $2}')
  v1=$(echo $ver|awk -F. '{print $1}')
  v2=$(echo $ver|awk -F. '{print $2}')

  echo "------------------------------"
  echo -e "INFO: Checking OS version\n"

  if [[ ! (($v1 -eq 7 && $v2 -ge 3) || ($v1 -ge 8)) ]]
  then
    echo "The linux OS must be updated to at least 7.3"
    echo -e "Update the OS and retry, aborting...\n"
    exit 11
  fi

  ##################################
  # Check cxlflash pkgs
  if [[ -z $(rpm -qa|grep "cxlflash") ]]
  then
    echo -e "\nERROR: cxlflash packages failed to install\n"
    exit 15
  fi
  if [[ ! -z $(rpm -qa|grep "cxlflashimage") ]]; then imagepkg=1; fi
fi


################################################################################
################################################################################
################################################################################
#                                                                              #
#                                                                              #
#                                  Common                                      #
#                                                                              #
#                                                                              #
################################################################################
################################################################################
################################################################################

  ##################################
  # Check LIC
  ls ${LIB_DIR}/libcflsh_block* >/dev/null 2>&1; if [[ $? -eq 0 ]]; then liclib=yes; else liclib=no; fi

  if [[ ! $1 =~ mfg ]]
  then
    if [[ -e /tmp/cxlflash_headless ]]
    then
      echo "INFO: running headless"
      date > /opt/.lic/$LD
    else
      if [[ ! -e /opt/.lic/$LD ]]
      then
        echo ""
        echo "Please review the licenses available in $LIC_DIR"
        echo "Press 'y' to accept the license agreement, or skip now and rerun later"
        read char
        if [[ $char = [yY] ]]
        then
          date > /opt/.lic/$LD
          if [[ -e /opt/$HD && $liclib = no ]]
          then
            mv /opt/$HD/* ${LIB_DIR} >/dev/null 2>&1
          fi
          rm -R /opt/$HD >/dev/null 2>&1
        else
          echo "ERROR: The license must be accepted"
          if [[ $liclib = yes ]]
          then
            if [[ ! -e /opt/$HD ]]; then mkdir /opt/$HD >/dev/null 2>&1; fi
            mv ${LIB_DIR}/libcflsh_block* /opt/$HD >/dev/null 2>&1
          fi
          exit 128
        fi
      fi
    fi
  fi

  ##################################
  # Check AFU version
  echo -e "\n------------------------------"
  echo -e "INFO: Checking firmware versions\n"

  CORSA_IMAGE=$(cat $SHARE_DIR/afu_versions|grep CORSA_IMAGE|awk '{print $2}'|cut -c26-33)
  GT_F_IMAGE=$(cat $SHARE_DIR/afu_versions|grep GT_F_IMAGE |awk '{print $2}'|cut -c26-33)
  GTP_F_IMAGE=$(cat $SHARE_DIR/afu_versions|grep GTP_F_IMAGE|awk '{print $2}'|cut -c26-33)
  GT_IMAGE=$(cat $SHARE_DIR/afu_versions|grep GT_IMAGE   |awk '{print $2}'|cut -c26-33)
  GTP_IMAGE=$(cat $SHARE_DIR/afu_versions|grep GTP_IMAGE  |awk '{print $2}'|cut -c26-33)

  for str in $(capi_flash -l|awk '{print $4$9}')
  do
    if [[ $str =~ 04cf && ! $str =~ $CORSA_IMAGE ]]; then do_flash=1; break; fi
    if [[ $str =~ 0601 && ! $str =~ $GT_IMAGE ]];    then do_flash=1; break; fi
    if [[ $str =~ 0628 && ! $str =~ $GTP_IMAGE ]];   then do_flash=1; break; fi
  done

  adapsGT=$(lspci|egrep "0601|0628"|awk '{print $1}')
  adapsCorsa=$(lspci|grep 04cf|awk '{print $1}')
  adapGTN=0; adapCorsaN=0;
  for adap in $adapsGT;    do let adapGTN=$adapGTN+1;       done
  for adap in $adapsCorsa; do let adapCorsaN=$adapCorsaN+1; done

  if [[ $adapGTN -eq 0 && $adapCorsaN -eq 0 ]]
  then
    echo "ERROR: no capiflash adapters were found"
    exit 20
  fi

  if [[ $do_flash ]]
  then
    if [[ $imagepkg ]]
    then
      systemctl stop cxlfd.service
      if [[ $(lsmod |grep cxlflash) =~ cxlflash ]]; then rmmod cxlflash; fi
      flash_all_adapters -reload
      systemctl daemon-reload
    else
      echo "INFO: unable to download firmware. The package cxlflashimage is not installed."
    fi
  fi

  if [[ ! $(lsmod |grep cxlflash) =~ cxlflash ]]; then modprobe cxlflash; fi

  ##################################
  # Re-check all versions
  echo -e "\n------------------------------"
  cflash_version
  if [[ $? -ne 0 ]]
  then
    echo -e "\n\n*************************"
    echo -e "ERROR: ABORTING..."
    echo -e "*************************\n\n"
    exit 5
  fi
  echo -e "\nINFO: Installed Versions....OK\n"

  ##################################
  # Check for devices
  echo -e "\n------------------------------"
  echo -e "INFO: Checking for devices\n"

 if [[ $1 =~ mfg && $liclib = no ]]; then cp /opt/$HD/libcflsh_block* ${LIB_DIR}; fi

  #check GT devices
  adapN=0
  adaps=$(lspci|egrep "0601|0628"|awk '{print $1}')
  for adap in $adaps; do let adapN=$adapN+1; done
  if [[ $adapN -ne $adapGTN ]]
  then
    echo "INFO: there are missing capiflash EJ1K adapters"
  fi

  #check Corsa devices
  adapN=0
  adaps=$(lspci|grep 04cf|awk '{print $1}')
  for adap in $adaps; do let adapN=$adapN+1; done
  if [[ $adapN -ne $adapCorsaN ]]
  then
    echo "INFO: there are missing capiflash EJ16 adapters"
  fi

  if [[ $VM ]]
  then
    sgsGT=$(for adap in $adapsGT
        do find /sys|grep $adap|grep scsi_generic|grep "sg"|grep subsystem|awk -F/ '{print $12}' |tr -d '\r'
        done)
    sgsCorsa=$(for adap in $adapsCorsa
        do find /sys|grep $adap|grep scsi_generic|grep "sg"|grep subsystem|head -1|awk -F/ '{print $12}' |tr -d '\r'
        done)
  else
    sgsGT=$(for adap in $adapsGT
        do find /sys|grep $adap|grep scsi_generic|grep "sg"|grep subsystem|awk -F/ '{print $13}' |tr -d '\r'
        done)
    sgsCorsa=$(for adap in $adapsCorsa
        do find /sys|grep $adap|grep scsi_generic|grep "sg"|grep subsystem|head -1|awk -F/ '{print $13}' |tr -d '\r'
        done)
  fi

  #ensure each GT has 2 sg devices
  adapN=0
  adaps=$(lspci|egrep "0601|0628"|awk '{print $1}')
  for adap in $adaps; do let adapN=$adapN+1; done
  sgN=0; sglist="";
  if [[ $adapGTN -gt 0 ]]
  then
    for sg in $sgsGT; do sgN=$((sgN+1)); sglist="$sglist /dev/$sg "; done
    sglist=$(echo $sglist|tr -d '\r')
    if [[ $sgN -ne  $((adapGTN*2)) ]] #FlashGT
    then
      echo "ERROR: #adaps($adapN) should have $((adapGTN*2)) sg devices, but there are only $sgN devices"
      exit 7
    fi
  fi

  if [[ $adapCorsaN -gt 0 ]]
  then
    for sg in $sgsCorsa; do sglist="$sglist /dev/$sg "; done
    sglist=$(echo $sglist|tr -d '\r')
  fi

  ##################################
  # Check IO
  echo -e "\n------------------------------"
  echo -e "INFO: Checking IO\n"
  unset CFLSH_BLK_TRC_VERBOSITY
  unset KV_TRC_VERBOSITY
  rc=0

  cxlfrefreshluns

  if [[ $1 =~ mfg ]]
  then
    iopsN=220000
    secs=10
  else
    iopsN=180000
    secs=3
  fi

  fstatus="$(/usr/bin/cxlfstatus)"

  for sg in $sglist
  do
    legacy=0
    if [[ $(echo "$fstatus"|grep ${sg:5:6}) =~ legacy ]]
    then
      legacy=1
      wwid=$(echo "$fstatus"|grep ${sg:5:6}|awk -F, '{print $4}')
      cxlfsetlunmode $wwid 1 >/dev/null
    fi
    iops=$(/usr/bin/blockio -d $sg -s$secs 2>&1)
    if [[ ! $iops =~ err && $(echo $iops|awk -Fiops: '{print $2}') -gt $iopsN ]]
    then
      echo "  $sg OK"
    else
      echo "  $sg failed, iops($iops) < expected iops($iopsN)"
      rc=8
    fi
    if [[ $legacy -eq 1 ]]; then cxlfsetlunmode $wwid 0 >/dev/null; fi
  done
  if [[ $rc -ne 0 ]]; then echo "ERROR: IO Test failed"; exit $rc; fi

  if [[ $1 =~ mfg ]]
  then
    if [[ -e /opt/.lic/$LD ]]; then rm -f /opt/.lic/$LD; fi
    if [[ ! -e /opt/$HD ]]; then mkdir /opt/$HD; fi
    mv ${LIB_DIR}/libcflsh_block* /opt/$HD >/dev/null 2>&1
  fi

  echo -e "\nINSTALL success"

exit 0
