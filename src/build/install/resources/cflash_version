#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/install/resources/cflash_version $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

if [[ $1 =~ help || $1 =~ -h ]]; then echo "Usage: $(basename $0)"; exit 0; fi
if [[ $1 =~ version ]]; then echo "v1.0"; exit 0; fi

# check permissions
if [[ $(id -u) != 0 ]]; then echo "use sudo"; exit 1; fi

export PATH=$PATH:/usr/bin

#determine distro
if [[ $(lsb_release -a 2>/dev/null) =~ Ubuntu ]];                   then ubuntu=1; fi
if [[ $(cat /etc/redhat-release 2>/dev/null) =~ Red ]];             then redhat=1; fi
if [[ $(cat /proc/cpuinfo|grep platform 2>/dev/null) =~ pSeries ]]; then VM=1;     fi

unset CF_VER
if [[ -e ver.txt ]]
then
  CF_VER=$(cat ver.txt)
fi

AFUVER_DIR=/usr/share/cxlflash
CORSA_VER=$(cat $AFUVER_DIR/afu_versions|grep CORSA_IMAGE|awk '{print $2}'|cut -c26-33)
GT_VER=$(cat $AFUVER_DIR/afu_versions|grep GT_IMAGE   |awk '{print $2}'|cut -c26-33)
GTP_VER=$(cat $AFUVER_DIR/afu_versions|grep GTP_IMAGE  |awk '{print $2}'|cut -c26-33)

err_rc=0

if [[ $ubuntu ]]
then
  OS_VER=16.04
  K_VER=4.4.0-36.55
  K_VER_GRUB=4.4.0-36-generic
elif [[ $redhat ]]
then
  #TODO: Check the Red Hat Versions correct to targetted release
  OS_VER=7.3; #VERSION_ID from /etc/os-release
  K_VER=3.10.0
  K_VER_GRUB=3.10.0
fi

#TODO: version checks for VM systems

if [[ $ubuntu ]]
then
  if [[ -z $CF_VER ]]
  then
    CF_VER=$(dpkg -l cxlflash 2>/dev/null |grep "cxlflash"|awk '{print $3}'|awk -F- '{print $1}')
  fi

  EXISTS_OS_VER=$(lsb_release -a 2>&1|grep -v LSB|grep Description|awk '{print $3}')
  n1=$(echo $EXISTS_OS_VER|awk -F. '{print $1}')
  n2=$(echo $EXISTS_OS_VER|awk -F. '{print $2}')
  if [[ ! $EXISTS_OS_VER =~ $OS_VER && ! $EXISTS_OS_VER =~ 17.04 ]]
  then
    if [[ $n1 -lt 16 || ($n1 -eq 16 && $n2 -lt 4) ]]
    then
      err_rc=1
      echo "ERROR:     OS:            Installed($EXISTS_OS_VER) => Required($OS_VER)"
    else
      echo "INFO:      OS:            Installed($EXISTS_OS_VER) => Recommended($OS_VER)"
    fi
  else
    echo   "INFO:      OS:            $EXISTS_OS_VER"
  fi

  if [[ ! -z $1 ]]; then K_VER=$1; fi

  EXISTS_CF_VER=$(dpkg -l cxlflash 2>/dev/null |grep "cxlflash  "|awk '{print $3}'|awk -F- '{print $1}')
  if [[ -z $EXISTS_CF_VER ]]
  then
    err_rc=3
    echo "ERROR:     cxlflash:      missing"
  elif [[ ! $EXISTS_CF_VER =~ $CF_VER ]]
  then
    err_rc=3
    echo "ERROR:     cxlflash:      Installed($EXISTS_CF_VER) != Required($CF_VER)"
  else
    echo "INFO:      cxlflash:      $EXISTS_CF_VER"
  fi

  EXISTS_CF_IMAGE_VER=$(dpkg -l cxlflashimage 2>/dev/null |grep cxlflashimage|awk '{print $3}'|awk -F- '{print $1}')
  if   [[ -z $EXISTS_CF_IMAGE_VER ]]
  then
    echo "INFO:      cxlflashimage: missing"
  elif [[ ! $EXISTS_CF_IMAGE_VER =~ $CF_VER ]]
  then
    err_rc=4
    echo "ERROR:     cxlflashimage: Installed($EXISTS_CF_IMAGE_VER) Required($CF_VER)"
  fi

  EXISTS_CF_TEST_VER=$(dpkg -l cxlflash-test 2>/dev/null |grep cxlflash-test|awk '{print $3}'|awk -F- '{print $1}')
  if [[ ! -z $EXISTS_CF_TEST_VER && ! $EXISTS_CF_TEST_VER =~ $CF_VER ]]
  then
    echo "INFO:      cxlflash-test: Installed($EXISTS_CF_TEST_VER) != Required($CF_VER)"
  fi

  EXISTS_K_VER=$(dpkg -l |grep $(uname -a|awk '{print $3}')|grep linux-image|grep -v extra|awk '{print $3}')
  n1=$(echo $EXISTS_K_VER|awk -F. '{print $1}')
  n2=$(echo $EXISTS_K_VER|awk -F. '{print $2}')
  n3=$(echo $EXISTS_K_VER|awk -F. '{print $3}'|awk -F- '{print $1}')
  n4=$(echo $EXISTS_K_VER|awk -F- '{print $2}'|awk -F. '{print $1}')
  n5=$(echo $EXISTS_K_VER|awk -F- '{print $2}'|awk -F. '{print $2}')
  if [[ ($n1 -lt 4) ||
        ($n1 -eq 4 && $n2 -lt 4) ||
        ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -lt 36) ||
        ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -eq 36 && $n5 -lt 55) ]]
  then
    if [[ ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -gt 36) ||
          ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -eq 36 && $n5 -gt 55) ]]
    then
      echo "INFO:      Kernel:        $EXISTS_K_VER"
    else
      err_rc=5
      echo "ERROR:     Kernel:        Booted($EXISTS_K_VER) => Required($K_VER) or newer"
    fi
  else
    echo   "INFO:      Kernel:        $EXISTS_K_VER"
  fi

  EXISTS_GRUB_VER=$(grep initrd /boot/grub/grub.cfg|head -1|awk -Finitrd.img- '{print $2}')
  n1=$(echo $EXISTS_GRUB_VER|awk -F. '{print $1}')
  n2=$(echo $EXISTS_GRUB_VER|awk -F. '{print $2}')
  n3=$(echo $EXISTS_GRUB_VER|awk -F. '{print $3}'|awk -F- '{print $1}')
  n4=$(echo $EXISTS_GRUB_VER|awk -F- '{print $2}'|awk -F. '{print $1}')
  if [[ ($n1 -lt 4) ||
        ($n1 -eq 4 && $n2 -lt 4) ||
        ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -lt 36) ]]
  then
    if [[ ! ($n1 -eq 4 && $n2 -eq 4 && $n3 -eq 0 && $n4 -gt 36) ]]
    then
      err_rc=6
      echo "ERROR:     Grub:          grub.cfg($EXISTS_GRUB_VER) => Required($K_VER_GRUB) or newer"
    fi
  fi

 if [[ -e /usr/bin/capi_flash ]]
 then
    IFS=$'\n'
    adaps=($(capi_flash -l 2>/dev/null))
    unset IFS
    for line in "${adaps[@]}"
    do
      if [[ $VM ]]
      then
        type=$(echo $line|awk '{print $5}')
        adapt=$(echo $line|awk '{print $4}')
        adap="$adapt      "
        fw=$(echo $line|awk -F\> '{print $2}' )
      else
        type=$(echo $line|awk '{print $4}')
        adap=$(echo $line|awk '{print $6}')
        fw=$(echo $line|awk -F\> '{print $2}')
      fi

      if [[ $line =~ 0601 ]]
      then
        if [[ ! $line =~ $GT_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($GT_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      elif [[ $line =~ 0628 ]]
      then
        if [[ ! $line =~ $GTP_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($GTP_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      elif [[ $line =~ 04cf ]]
      then
        if [[ ! $line =~ $CORSA_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($CORSA_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      fi
    done
  fi

elif [[ $redhat ]]
then
  if [[ -z $CF_VER ]]
  then
    CF_VER=$(rpm -qi cxlflash | grep Version | awk -F": " '{print $2}')
  fi

  EXISTS_OS_VER=$(grep "VERSION_ID" /etc/os-release | awk -F'"' '{print $2}')
  if [[ ! $EXISTS_OS_VER =~ $OS_VER ]]
  then
    echo "WARNING:   OS:            Installed($EXISTS_OS_VER) must be >= $OS_VER"
  else
    echo "INFO:      OS:            $EXISTS_OS_VER"
  fi

  if [[ ! -z $1 ]]; then K_VER=$1; fi

  EXISTS_CF_VER=$(rpm -qi cxlflash | grep Version | awk -F": " '{print $2}')
  if [[ -z $EXISTS_CF_VER ]]
  then
    err_rc=3
    echo "ERROR:     cxlflash:      missing"
  elif [[ ! $EXISTS_CF_VER =~ $CF_VER ]]
  then
    err_rc=3
    echo "ERROR:     cxlflash:      Installed($EXISTS_CF_VER) != Required($CF_VER)"
  else
    echo "INFO:      cxlflash:      $EXISTS_CF_VER"
  fi

  EXISTS_CF_IMAGE_VER=$(rpm -qi cxlflashimage|grep Version|awk -F": " '{print $2}')
  if   [[ -z $EXISTS_CF_IMAGE_VER ]]
  then
    echo "INFO:      cxlflashimage: missing"
  elif [[ ! $EXISTS_CF_IMAGE_VER =~ $CF_VER ]]
  then
    err_rc=4
    echo "ERROR:     cxlflashimage: Installed($EXISTS_CF_IMAGE_VER) != Required($CF_VER)"
  fi

  EXISTS_CF_TEST_VER=$(rpm -qi cxlflash-test | grep Version | awk -F": " '{print $2}')
  if [[ ! -z $EXISTS_CF_TEST_VER && ! $EXISTS_CF_TEST_VER =~ $CF_VER ]]
  then
    err_rc=2
    echo "ERROR:     cxlflash-test: Installed($EXISTS_CF_TEST_VER) != Required($CF_VER)"
  fi

  EXISTS_K_VER=$(rpm -q kernel)
  if [[ ! $EXISTS_K_VER =~ $K_VER ]]
  then
    err_rc=5
    echo "WARNING:   Kernel:        Booted($(uname -a|awk '{print $3}')) != Required($K_VER)"
  else
    echo "INFO:      Kernel:        $K_VER"
  fi

  EXISTS_GRUB_VER=$(grep initrd /boot/grub2/grub.cfg  | head -1 | awk -Finitramfs- '{print $2}')
  if [[ ! $EXISTS_GRUB_VER =~ $K_VER_GRUB ]]
  then
    err_rc=6
    echo "WARNING:   Grub:          grub.cfg($EXISTS_GRUB_VER) != Required($K_VER_GRUB)"
  fi

 if [[ -e /usr/bin/capi_flash ]]
  then
    IFS=$'\n'
    adaps=($(capi_flash -l 2>/dev/null))
    unset IFS
    for line in "${adaps[@]}"
    do
      if [[ $VM ]]
      then
        type=$(echo $line|awk '{print $5}')
        adapt=$(echo $line|awk '{print $4}')
        adap="$adapt      "
        fw=$(echo $line|awk -F\> '{print $2}' )
      else
        type=$(echo $line|awk '{print $4}')
        adap=$(echo $line|awk '{print $6}')
        fw=$(echo $line|awk -F\> '{print $2}')
      fi

      if [[ $line =~ 0601 ]]
      then
        if [[ ! $line =~ $GT_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($GT_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      elif [[ $line =~ 0628 ]]
      then
        if [[ ! $line =~ $GTP_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($GTP_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      elif [[ $line =~ 04cf ]]
      then
        if [[ ! $line =~ $CORSA_VER ]]
        then
          err_rc=7
          echo "ERROR:     $adap   $type Loaded($fw) != Required($CORSA_VER)"
        else
          echo "INFO:      $adap   $type $fw"
        fi
      fi
    done
  fi
fi

#TODO: add version checks for VM

exit $err_rc
