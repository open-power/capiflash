#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/install/resources/cxlffdc $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

if [[ $1 =~ version ]]; then echo "v1.0"; exit 0; fi

export PATH=$PATH:/usr/bin

DIR=cxlffdc."$(date|awk '{print $4"_"$2"_"$3"_"$6}'|sed 's/:/_/'g)"

##################
#setup kernel debug
##################
if [[ $1 =~ kdebug ]]
then
  if [[ $(id -u) != 0 ]]; then echo "use sudo"; exit 1; fi
  echo "unload cxlflash"
  rmmod cxlflash
  echo "unload cxl"
  rmmod cxl
  echo "load cxl"
  insmod /lib/modules/$(uname -a|awk '{print $3}')/kernel/drivers/misc/cxl/cxl.ko verbose=1
  echo 1 > /sys/kernel/debug/tracing/events/cxl/enable
  echo "load cxlflash"
  modprobe cxlflash
  echo "module cxlflash +p" > /sys/kernel/debug/dynamic_debug/control
  exit 0
fi

#check permissions
if [[ $(id -u ${USER}) -eq 0 ]]
then
  DATAPATH=/var/log/cflash
  perms=1
else
  echo "****************************************"
  echo "*** run with sudo for better results ***"
  echo "****************************************"
  DATAPATH=/tmp
fi

DATADIR=${DATAPATH}/${DIR}
MISCDIR=${DATAPATH}/misc
BINDIR=/usr/bin
pgz=$(ls /usr/lib/cxlflash/ext/p*gz 2>/dev/null)
ptd=/usr/lib/cxlflash/ext/ptd

##################
#Determine distro to differentiate dpkg | rpm
##################
if [[ $(cat /etc/os-release 2>/dev/null) =~ Ubuntu ]];          then ubuntu=1; fi
if [[ $(cat /etc/os-release 2>/dev/null) =~ Red ]];             then redhat=1; fi
if [[ $(cat /etc/os-release 2>/dev/null) =~ Fedora ]];          then redhat=1; fi
if [[ $(grep platform /proc/cpuinfo 2>/dev/null) =~ pSeries ]]; then VM=1;     fi

##################
# wait 5 seconds for the pid to finish, then kill it if still running
##################
check_pid()
{
  local cnt=0
  while [[ $cnt -lt 5 ]]
  do
    sleep 1
    if [[ ! $(ps -p $1) =~ $1 ]]; then break; fi
    cnt=$((cnt+1))
    echo "cxlffdc: waiting for slow process $1"
  done
  if [[ $(ps -p $1) =~ $1 ]]
  then
    kill -9 $1
  fi
}

##################
# print debug help
##################
if [[ $1 =~ help || $1 =~ -h ]]
then
  echo "Usage: $(basename $0) [kdebug]"
  echo "export CFLSH_BLK_TRC_VERBOSITY=4"
  echo "export CFLSH_BLK_TRC_SYSLOG=off"
  echo "export KV_TRC_VERBOSITY=2"
  echo ""
  echo "echo \"module cxlflash +p\" > /sys/kernel/debug/dynamic_debug/control"
  if [[ $redhat ]]
  then
    echo "uncomment these two lines in /etc/rsyslog.conf"
    echo "kern.*  /var/log/kern.log"
    echo "\$ModLoad imklog"
    echo ""
    echo "Restart the service, run \"service rsyslog restart\""
    echo "run \"journalctl\" to extract debug traces"
  fi
  exit 0
fi

##################
# main
##################
ret=$(pwd)
if [[ -e $DATADIR ]]; then rm -rf $DATADIR 2>/dev/null; fi
mkdir -p $DATADIR
cd $DATADIR

cardnums=`ls -d /sys/class/cxl/card* | awk -F"/sys/class/cxl/card" '{ print $2 }'`
while read -r line
do
  card=$(echo "$line"|awk -F"afu" '{print $2}'|cut -c1)
  mkdir card$card;
  type=$(echo "$line"|awk '{print $4}')
  if [[ $VM ]]
  then
    printf "\n INFO:  psl trace on VM Not Supported! \n\n"
  else
    if [[ ($type =~ 0601 || $type =~ 04cf) &&
          -f ${BINDIR}/psl_trace_dump && $perms -eq 1 ]]
    then
      echo "Dumping PSL data for card$card"
      ${BINDIR}/psl_trace_dump ${DATADIR}/card$card $card >/dev/null
    elif [[ $type =~ 0628 && -f ${BINDIR}/psl_trace_dump_p9 && $perms -eq 1 ]]
    then
      echo "Dumping PSL data for card$i"
      ${BINDIR}/psl_trace_dump_p9 --card $card --dump \
         --output=${DATADIR}/card$card/psl_dump >/dev/null
      ${BINDIR}/psl_trace_dump_p9 --card $card --starttrace >/dev/null
    fi
  fi
done <<< "$(/usr/bin/capi_flash -l)"

AFUs=`ls /dev/cxl/afu*m`
for afu_m in $AFUs
do
  ${BINDIR}/cxl_afu_dump $afu_m > $(basename $afu_m)
done

for gt in $(lspci|egrep "0601|0628"|awk '{print $1}')
do
  lspci -s $gt -vv | egrep "$gt|LnkSta:" >> link_status
  echo ""                                >> link_status

  card=$(ls -d /sys/devices/*/*/$gt/cxl/card* 2>/dev/null)
  cardN=${card: -1}
  echo "afu$cardN:"                                   >> cxl_afu_status
  for port in 0 1 2 3
  do
    if [[ $(lspci -s $gt) =~ 0601 && $port -gt 1 ]]; then continue; fi
    ${BINDIR}/cxl_afu_status -d afu$cardN.0m -p $port >> cxl_afu_status
  done
  printf "\n"                                         >> cxl_afu_status
done

ps_fields="user,group,ruser,rgroup,pid,tid,ppid,pgid,uid,tgid,nlwp,sgi_p,nice,pri,\
etime,pcpu,pmem,lim,rss,s,size,sz,vsz,trs,stat,f,stime,time,tty,comm,args"

machine_info                         >  $DATADIR/machine_info
ulimit -a                            >  $DATADIR/ulimits
top -n 1 -b                          >  $DATADIR/top
ps -Tdaeo $ps_fields                 >  $DATADIR/ps
env                                  >  $DATADIR/env
uptime                               >  $DATADIR/uptime
date                                 >> $DATADIR/uptime
lspci -vvv                           >  $DATADIR/lspci_vvv
cat /etc/*-release | egrep "PRETTY_NAME|^NAME|VERSION_ID|^VERSION=" >  $DATADIR/codelevels 2>/dev/null
uname -a                             >> $DATADIR/codelevels
if [[ $ubuntu ]]
then
  dpkg -l|egrep "cflash|cflashimage"   >> $DATADIR/codelevels
elif [[ $redhat ]]
then
  rpm -qa|egrep "cflash|cflashimage"   >> $DATADIR/codelevels
fi

capi_flash -l >> $DATADIR/codelevels
cflash_version   >> $DATADIR/codelevels

cflash_temp   >  $DATADIR/cflash_temp&
check_pid $!
cflash_wear   >  $DATADIR/cflash_wear&
check_pid $!
cxlfstatus       >  $DATADIR/cxlfstatus&
check_pid $!
cflash_capacity -v >  $DATADIR/cflash_capacity&
check_pid $!
cflash_capacity -t 04cf >> $DATADIR/cflash_capacity&
check_pid $!

if [[ -d $MISCDIR ]]
then
  mkdir $DATADIR/misc
  cp $MISCDIR/* $DATADIR/misc
  truncate --size=0 $MISCDIR/*
fi

dmesg > dmesg

for file in $(ls -1 /var/log/syslog 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/${file##*/}
  truncate --size=0 $file
done

if [[ $redhat ]]
then
  journalctl -n 50000 > /$DATADIR/syslog
fi

#redhat version of syslog
for file in $(ls -1 /var/log/messages 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/${file##*/}
  truncate --size=0 $file
done

for file in $(ls -1 /sys/firmware/opal/msglog 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/opal_${file##*/}
done

for file in $(ls -1 /var/log/kern.log 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/${file##*/}
  truncate --size=0 $file
done

for file in $(ls -1 /tmp/*.cflash_block_trc 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/${file##*/}
  truncate --size=0 $file
done

for file in $(ls -1 /tmp/*.arkdb.kv.log 2>/dev/null)
do
  tail -400000 $file  > $DATADIR/${file##*/}
  truncate --size=0 $file
done

cd ..
tar -czf $DIR.tgz $DIR
rm -Rf $DIR

echo "INFO: FFDC Collected below."
ls -l $DATADIR.tgz

cd $ret
