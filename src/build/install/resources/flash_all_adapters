#!/bin/bash
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/install/resources/flash_all_adapters $
#
# IBM Data Engine for NoSQL - Power Systems Edition User Library Project
#
# Contributors Listed Below - COPYRIGHT 2014,2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

if [[ $1 =~ help || $1 =~ -h ]]; then echo "Usage: $(basename $0)"; exit 0; fi
if [[ $1 =~ version ]]; then echo "v1.0"; exit 0; fi

KERNEL_MOD="cxlflash"
CAPI_FLASH_PL=capi_flash
RESET_PL=cflash_reset
IMAGES_DIR=/lib/firmware/cxlflash
FLASH_ROOT=/usr/bin
MINCAPMASK="0003"
CAPABILITYKW="V3"
e_rc=0
do_reset=0
load_factory=0
opt=""
AFUVER_DIR=/usr/share/cxlflash

#determine distro
if [[ $(cat /etc/os-release 2>/dev/null) =~ Ubuntu ]];          then ubuntu=1; fi
if [[ $(cat /etc/os-release 2>/dev/null) =~ Red ]];             then redhat=1; fi
if [[ $(cat /etc/os-release 2>/dev/null) =~ Fedora ]];          then redhat=1; fi
if [[ $(grep platform /proc/cpuinfo 2>/dev/null) =~ pSeries ]]; then VM=1;     fi

#if [[ $redhat ]]; then
RESET_PL=cflash_perst
#fi
#if [[ $ubuntu ]]; then
#concurrent="--concurrent"
#fi

checkidle()
{
    mods=$(lsmod)
    if [[ $mods == *"cxlflash"* ]]
    then
        printf "       ERROR, Cannot flash with cxlflash loaded: \"rmmod cxlflash\" and retry\n\n"
        exit 1
    fi
}

readvpd()
{
    local pciid=$1
    local keyword=$2
    vpd_value=$(lspci -s $pciid -vv | sed -n -e '/Vital Product Data/,/End/ p' | grep $keyword | awk -F": " '{print $2}')
    if [[ -z "$vpd_value" ]]
    then
        printf "       ERROR, PCI device %s, VPD keyword: %s not found\n\n" $pciid $keyword
        return 2
    fi
    return 0
}

findloc()
{
    local devspecpath="/sys/bus/pci/devices/$1/devspec"
    if [[ ! -f "$devspecpath" ]]; then
        echo "       ERROR, Unable to find devspec for device %s. Could not find '%s'\n\n" $1 $devspecpath
        return 3
    fi
    local devspec=$(cat $devspecpath)
    local loccodepath="/proc/device-tree$devspec/ibm,loc-code"
    if [[ ! -f "$loccodepath" ]]; then
        printf "       ERROR, Unable to find device tree special file path for PCI device %s: %s\n\n" $1 $loccodepath
        return 4
    fi
    loccode=$(tr '\000' '\012' <$loccodepath)
    if [[ -z "$loccode" ]]
    then
        printf "       ERROR, Location code is invalid for PCI device %s\n\n" $1
        return 5
    fi
    return 0
}

checkcompat()
{
    line=$(lspci -s $1| egrep "04cf|0601|0628")
    if [ $? -ne 0 ]
    then
      printf "       ERROR, unknown capi adapter\n\n"
      rc=7
    fi

    if [[ -z $2 ]]; then return 0; fi

    readvpd $1 $2; rc=$?
    if [ $rc -ne 0 ]; then return $rc; fi
    resultmask=$(($MINCAPMASK & $vpd_value))
    if [[ "$resultmask" -ne "$MINCAPMASK" ]]
    then
        printf "       ERROR, The available firmware is incompatible with this adapter. %s=0x%s\n\n" $2 $vpd_value
        rc=6
    fi
    return $rc
}

flashadapters()
{
    $FLASH_ROOT/$CAPI_FLASH_PL -l | while read adapStr
    do
        adap=$(echo  $adapStr|awk '{print $6}')
        afu=$(echo $adapStr|awk '{print $5}')
        #verify location code
        findloc $adap; rc=$?
        if [[ $rc -ne 0 ]]; then e_rc=$rc; continue; fi

        #get device ID
        devid=$(lspci -s $adap| awk 'BEGIN{FS="IBM Device "}; {print $NF}'|awk -F\( '{print $1}')

        if [[ $devid =~ 04cf && $load_factory -eq 1 ]]; then continue; fi

        echo "INFO:  Processing: $adap $afu $loccode"

        #check for a healthy adap
        if [ ! -f /sys/devices/*/*/$adap/cxl/card*/image_loaded ]
        then
           echo "       ERROR, Skipping, card is in a bad state"
           echo
           continue
        fi

        #query FW level
        afuver=$(/usr/bin/cxl_afu_dump /dev/cxl/${afu}.0m -v 2>/dev/null| grep "AFU Version"|awk -F" " '{print $NF}')
        if [[ -z $afuver ]]
        then
          afuver=__UNKNOWN_FW_LEVEL__
        fi

        if [ $devid = "04cf" ]    #CORSA
        then
          #verify VPD
          checkcompat $adap $CAPABILITYKW; rc=$?
          if [[ $rc -ne 0 ]]
          then
            e_rc=$rc;
            continue;
          fi

          if [[ $CORSA_IMAGE =~ $afuver ]]
          then
            printf "       Firmware is up to date (%s)\n\n" $afuver
            continue
          fi
          printf "       Replacing %s with %s\n\n" $afuver $CORSA_IMAGE
          $FLASH_ROOT/$CAPI_FLASH_PL -t $adap -f $IMAGES_DIR/$CORSA_IMAGE $concurrent
          rc=$?
          if [[ $rc -ne 0 ]]
          then
            e_rc=$rc
            echo "       ERROR: Failed flashing $adap"
          else
            if [[ $do_reset -eq 1 ]]
            then
              $FLASH_ROOT/$RESET_PL -t $adap
              rc=$?
              if [[ $rc -ne 0 ]]
              then
                e_rc=$rc
                echo "       ERROR: Failed PERSTing $adap"
              fi
            fi
          fi

        elif [ $devid = "0601" ]  #FLASH_GT
        then
          #verify VPD
          checkcompat $adap; rc=$?
          if [[ $rc -ne 0 ]]; then e_rc=$rc; continue; fi

          if [[ $GT_IMAGE =~ $afuver ]]
          then
            printf "       Firmware is up to date (%s)\n\n" $afuver
            continue
          fi
          if [[ $load_factory -eq 1 ]]
          then
            printf "       Flashing %s\n\n" $GT_IMAGE
          else
            if [[ $GT_F_IMAGE =~ $afuver ]]
            then
              printf "       Flashing %s\n\n" $GT_IMAGE
            else
              printf "       Replacing %s with %s\n\n" $afuver $GT_IMAGE
            fi
          fi
          $FLASH_ROOT/$CAPI_FLASH_PL $opt -t $adap -f $IMAGES_DIR/$GT_IMAGE $concurrent
          rc=$?
          if [[ $rc -ne 0 ]]
          then
            e_rc=$rc
            echo "       ERROR: Failed flashing $adap"
          else
            if [[ $do_reset -eq 1 ]]
            then
              $FLASH_ROOT/$RESET_PL -t $adap
              rc=$?
              if [ $rc -ne 0 ]
              then
                e_rc=$rc
                echo "       ERROR: Failed PERSTing $adap"
              fi
            fi
          fi

        elif [ $devid = "0628" ]  #FLASH_GT_PLUS
        then
          #verify VPD
          checkcompat $adap; rc=$?
          if [[ $rc -ne 0 ]]; then e_rc=$rc; continue; fi

          if [[ $GTP_IMAGE =~ $afuver ]]
          then
            printf "       Firmware is up to date (%s)\n\n" $afuver
            continue
          fi
          if [[ $load_factory -eq 1 ]]
          then
            printf "       Flashing %s\n\n" $GTP_IMAGE
          else
            if [[ $GTP_F_IMAGE =~ $afuver ]]
            then
              printf "       Flashing %s\n\n" $GTP_IMAGE
            else
              printf "       Replacing %s with %s\n\n" $afuver $GTP_IMAGE
            fi
          fi
          $FLASH_ROOT/$CAPI_FLASH_PL $opt -t $adap -f $IMAGES_DIR/$GTP_IMAGE $concurrent
          rc=$?
          if [[ $rc -ne 0 ]]
          then
            e_rc=$rc
            echo "       ERROR: Failed flashing $adap"
          else
            if [[ $do_reset -eq 1 ]]
            then
              $FLASH_ROOT/$RESET_PL -t $adap
              rc=$?
              if [ $rc -ne 0 ]
              then
                e_rc=$rc
                echo "       ERROR: Failed PERSTing $adap"
              fi
            fi
          fi

        else
          echo "       ERROR, Download is not supported for the Device ID: $devid"
          e_rc=8
        fi
        echo ""
    done
}

flashadapters_VM()
{
  $FLASH_ROOT/$CAPI_FLASH_PL -l | while read adap
  do
    if [[ $adap =~ 04cf ]]; then fw=$CORSA_IMAGE;
    else                         fw=$GT_IMAGE;
    fi
    afuN=$(echo $adap|cut -c19-24)m
    echo $adap
    afuver=$(/usr/bin/cxl_afu_dump /dev/cxl/$afuN -v 2>/dev/null| grep "AFU Version"|awk -F" " '{print $NF}')

    echo "INFO:  Processing: $afuN"
    if [[ -z $afuver ]]; then afuver=__UNKNOWN_FW_LEVEL__; fi

    if [[ $fw =~ $afuver ]]
    then
      printf "       Firmware is up to date (%s)\n\n" $afuver
      continue
    fi
    printf "       Replacing %s with %s\n\n" $afuver $fw

    $FLASH_ROOT/$CAPI_FLASH_PL -t $afuN -f $fw
    if [ $rc -ne 0 ]
    then
      e_rc=$rc
      echo "       ERROR: Failed flashing $adap"
    fi
  done
}

#########
# main
#########
CORSA_IMAGE=$(cat $AFUVER_DIR/afu_versions|grep CORSA_IMAGE|awk '{print $2}')
GT_F_IMAGE=$(cat $AFUVER_DIR/afu_versions|grep GT_F_IMAGE |awk '{print $2}')
GTP_F_IMAGE=$(cat $AFUVER_DIR/afu_versions|grep GTP_F_IMAGE|awk '{print $2}')
GT_IMAGE=$(cat $AFUVER_DIR/afu_versions|grep GT_IMAGE   |awk '{print $2}')
GTP_IMAGE=$(cat $AFUVER_DIR/afu_versions|grep GTP_IMAGE  |awk '{print $2}')

grep pSeries /proc/cpuinfo >/dev/null 2>&1 && _VM=1
#if [[ $redhat ]]; then
  checkidle
#fi
echo "module cxlflash +p" > /sys/kernel/debug/dynamic_debug/control

if [[ $1 =~ reload  || $2 =~ reload  ]]; then do_reset=1; fi
if [[ $1 =~ factory || $2 =~ factory ]]
then
  opt=" -p0 "
  load_factory=1
  GT_IMAGE=$GT_F_IMAGE
  GTP_IMAGE=$GTP_F_IMAGE
fi

if [[ $_VM -eq 1 ]]; then flashadapters_VM
else                      flashadapters
fi

echo ""
if [[ $e_rc -eq 0 ]]
then
  echo "INFO:  Adapter update success"
else
  echo "INFO:  review msgs for errors"
fi

echo "module cxlflash -p" > /sys/kernel/debug/dynamic_debug/control
exit $e_rc
