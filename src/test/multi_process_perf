#!/bin/ksh
#  IBM_PROLOG_BEGIN_TAG
#  This is an automatically generated prolog.
#
#  $Source: src/test/multi_process_perf $
#
#  IBM CONFIDENTIAL
#
#  COPYRIGHT International Business Machines Corp. 2015 - 2016
#
#  p1
#
#  Object Code Only (OCO) source materials
#  Licensed Internal Code Source Materials
#  IBM Surelock Licensed Internal Code
#
#  The source code for this program is not published or other-
#  wise divested of its trade secrets, irrespective of what has
#  been deposited with the U.S. Copyright Office.
#
#  Origin: 30
#
#  IBM_PROLOG_END

if [[ $1 = "-h" ]]
then
    echo "Usage: multi_process_perf [libpath] [binpath]"
    echo " ex:   multi_process_perf"
    echo " ex:   multi_process_perf /.../surelock-sw/img /.../surelock-sw/obj/tests"
    exit
fi

_uname=$(uname -a|awk '{print $1}')
if [[ $(whoami) != root ]];
then
   echo "must be run as root"
   exit
fi

if [[ $3 == int* || $3 == INT* ]]
then
   _intrps="-i"
fi

######## Set these DEVx vars to the correct luns for the best results ##########
######## 1 lun per FC port, across two cards                          ##########
DEVS=4
if [[ $_uname = "AIX" ]]
then
    DEV1=/dev/hdisk18
    DEV2=/dev/hdisk18
    DEV3=/dev/hdisk19
    DEV4=/dev/hdisk19
    _64=64
else
    # use only /dev/sg* devices
    if [[ $(hostname) == cougar* ]]
    then
     DEV1=/dev/sg9
     DEV2=/dev/sg10
     DEV3=/dev/sg11
     DEV4=/dev/sg12
    elif [[ $(hostname) == p8tul2* ]]
    then
     DEV1=/dev/sg34
     DEV2=/dev/sg36
     DEV3=/dev/sg38
     DEV4=/dev/sg40
    elif [[ $(hostname) == moriar* ]]
    then
     DEV1=/dev/sg4
     DEV2=/dev/sg5
     DEV3=/dev/sg6
     DEV4=/dev/sg7
    else
     DEV1=/dev/sg4
     DEV2=/dev/sg5
     DEV3=/dev/sg6
     DEV4=/dev/sg7
    fi
    _64=
fi

if [[ ! -z $1 ]]
then
   if [[ $_uname = "AIX" ]]
   then
      export LIBPATH=$1
      cmd="$2"
   else
      cmd="LD_LIBRARY_PATH=$1 $2"
   fi
   cmd_dir=$cmd
else
   cmd_dir="/usr/bin"
fi

function ark
{
echo "ARK Performance, using run_kv_benchmark"

for len in 100; do                             #len, 4096 131072
  for q in 1 8 16; do                    #QD, nasync, ops per ark
     for ctx in 1 25 50; do #ctxts/processes (x's 4)
        rm -f /tmp/out_p
        c=0
        while [ $c -lt $ctx ]; do
          cmd="$cmd_dir/run_kv_benchmark$_64 -d $DEV1 -q $q -s 25 >> /tmp/out_p"
          eval $cmd&
          cmd="$cmd_dir/run_kv_benchmark$_64 -d $DEV2 -q $q -s 25 >> /tmp/out_p"
          eval $cmd&
          cmd="$cmd_dir/run_kv_benchmark$_64 -d $DEV3 -q $q -s 25 >> /tmp/out_p"
          eval $cmd&
          cmd="$cmd_dir/run_kv_benchmark$_64 -d $DEV4 -q $q -s 25 >> /tmp/out_p"
          eval $cmd&
          let c=c+1
          PID=$!
        done
        wait
        iops=0
        for d in $(cat /tmp/out_p|awk -F "io/s:" '{print $2}'|grep sec|awk -F " secs" '{print $1}'); do ((iops+=$d)); done
        if [[ $iops -gt 800000 ]]; then iops=800000; fi
        printf "Processes:%-3d QD:%-3d IOPS:%-6d\n" $(($ctx*$DEVS)) $q $iops
        if [[ $iops -gt 700000 ]]; then break; fi
     done
  done
done
}

function block
{
echo "BLOCK Performance, using blockio"
for rd in 100; do         #%reads
     for q in 1 8 16; do     #QD
        for j in 1 25 50     #Processes
         do
                rm -f /tmp/out_p
                c=0
                while [ $c -lt $j ]; do
                        cmd="$cmd_dir/blockio$_64 -d $DEV1 -q $q -r $rd -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockio$_64 -d $DEV2 -q $q -r $rd -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockio$_64 -d $DEV3 -q $q -r $rd -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockio$_64 -d $DEV4 -q $q -r $rd -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        let c=c+1
                        PID=$!
                done
                wait
                iops=0
                for d in $(cat /tmp/out_p|grep iops|awk -F"iops:" '{print $2}'); do ((iops+=$d)); done;
                if [[ $iops -gt 800000 ]]; then iops=800000; fi
                printf "Processes:%-3d QD:%-4d Rd:%-3d Wt:%-3d iops:%-6d\n" $(($j*$DEVS)) $q $rd $((100-$rd)) $iops
                if [[ $iops -gt 700000 ]]; then break; fi
        done
     done
done
echo ""
echo "BLOCK Performance, using blockplistio"
for rd in 100; do         #%reads
     for q in 1 8 16; do     #QD
        for j in 1 25 50     #Processes
         do
                rm -f /tmp/out_p
                c=0
                while [ $c -lt $j ]; do
                        cmd="$cmd_dir/blockplistio$_64 -d $DEV1 -l 1 -c $q -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockplistio$_64 -d $DEV2 -l 1 -c $q -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockplistio$_64 -d $DEV3 -l 1 -c $q -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        cmd="$cmd_dir/blockplistio$_64 -d $DEV4 -l 1 -c $q -s 10 $_intrps >> /tmp/out_p"
                        eval $cmd&
                        let c=c+1
                        PID=$!
                done
                wait
                iops=0
                for d in $(cat /tmp/out_p|grep iops|awk  '{print $9}'|awk -F : '{print $2}'); do ((iops+=$d)); done;
                if [[ $iops -gt 800000 ]]; then iops=800000; fi
                printf "Processes:%-3d QD:%-4d Rd:%-3d Wt:%-3d iops:%-6d\n" $(($j*$DEVS)) $q $rd $((100-$rd)) $iops
                if [[ $iops -gt 700000 ]]; then break; fi
        done
     done
done
}

block
printf "\n"
ark
